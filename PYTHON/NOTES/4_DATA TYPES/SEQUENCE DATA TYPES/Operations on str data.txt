				==================================================
						Operations on str data
				==================================================
=>On the object of str, we can perform Two Types of Operations. They are

			1. Indexing
			2. Slicing 
---------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Indexing
---------------------------------------------------------------------------------------------------------------------------------------------------------------
=>The Process of Obtaining Single Value from Given Str Object is called Indexing
=>Syntax:  strobj[ index ]
=>Here strobj is an object of <class,'str'>
=>here index represents  either +VE  or -VE
=>If we enter Valid Index Value then PVM gets Corresponding Indexed Value from str object
=>If we enter InValid Index Value then PVM generates IndexError
------------------------------
Examples
------------------------------
>>> s="PYTHON"
>>> print(s,type(s))-----------------PYTHON <class 'str'>
>>> print(s[0])-----------------------P
>>> s[0]-------------------------------'P'
>>> s[2]-------------------------------'T'
>>> s[5]-------------------------------'N'
>>> s[3]-------------------------------'H'
>>> s[4]-------------------------------'O'
>>> s[1]-------------------------------'Y'
>>> s[-5]------------------------------'Y'
>>> s[-4]------------------------------'T'
>>> s[-1]-----------------------------'N'
>>> s[-6]-----------------------------'P'
>>> s[-3]------------------------------'H'
>>> s[10]-----------------------------IndexError: string index out of range
>>> s[-7]------------------------------IndexError: string index out of range
-----------------------
>>> s="PYTHON"
>>> s[0]------------------------'P'
>>> s[-1]-----------------------'N'
>>> s[len(s)-1]---------------'N'
>>> s[-len(s)]----------------'P'
>>> s[len(s)]
>>> s[-len(s)+1]-------------'Y'
>>> s[-len(s)-1]-------------IndexError: string index out of range
-----------------------------
>>> "HYDERABAD"[0]----------------'H'
>>> "HYDERABAD"[-1]---------------'D'
>>> "HYDERABAD"[len("HYD")]---'E'
>>> "HYDERABAD"[True]-----------'Y'
>>> "HYDERABAD"[-True]----------'D'
>>> "HYDERABAD"[-len("HYDERABAD")]----'H'
--------------------------------------
>>> "123456"[-2]--------------'5'
>>> "123456"[0b0001]-----'2'
>>> "123456"[0xF]----------IndexError: string index out of range
---------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Slicing 
---------------------------------------------------------------------------------------------------------------------------------------------------------------
=>The Process of Obtaining Range of values OR sub string from Given Main String is called Slicing.
=>The Slicing  Operation can be performed by using 5 Syntaxes. They are
***********************************************************
Syntax-1: strobj[BEGIN:END]
***********************************************************
=>This Syntax Gets Range of Values from BEGIN Index to END-1 Index provided BEGIN < END Otherwise we get 
    SPACE OR '  ' as a Result
-------------------------
Example:
-------------------------
>>> s="PYTHON"   #   # Here we use completely +Ve Indices
>>> print(s)--------------------PYTHON
>>> s[0:3]----------------------'PYT'
>>> s[3:0]----------------------'  '
>>> print(s[3:0])-------------Space

>>> s[2:5]----------------------'THO'
>>> s[1:5]----------------------'YTHO'
>>> s[0:4]----------------------'PYTH'
>>> s[2:4]----------------------'TH'
>>> s[1:4]----------------------'YTH'
--------------------------------------------------
>>> s="PYTHON"   # Here we use completely -Ve Indices
>>> print(s)--------------------PYTHON
>>> s[-6:-3]--------------------'PYT'
>>> s[-4:-1]--------------------'THO'
>>> s[-5:-1]-------------------'YTHO'
>>> s[-4:-6]-------------------' '
>>> s[-6:-1]-------------------'PYTHO'
--------------------------------------------------------------
Sub Point--Special Points:  +VE BEGIN : -VE END
*********************************************************
>>> s="PYTHON"
>>> s[1:-2]----------------'YTH'
>>> s[2:-1]----------------'THO'
>>> s[0:-1]----------------'PYTHO'
>>> s[1:-2]----------------'YTH'
>>> s[2:-3]---------------'T'
>>> s[2:-5]----------------'   '
>>> s[2:-4]----------------'  '
>>> s[2:-2]----------------'TH'
--------------------------------------------------------------
Sub Point--Special Points:  -VE BEGIN : +VE END
*********************************************************
>>> s="PYTHON"
>>> print(s)------------------PYTHON
>>> s[-6:5]-------------------'PYTHO'
>>> s[-4:2]-------------------'  '
>>> s[-4:5]-------------------'THO'
>>> s[-6:1]-------------------'P'
>>> s[-4:4]-------------------'TH'
--------------------------------------------------------------
Sub Point--Most  Special Points:  
*********************************************************
>>> s="PYTHON"
>>> print(s)-------------------PYTHON
>>> s[0:225]-----------------'PYTHON'
>>> s[2:127]------------------'THON'
>>> s[3:300]------------------'HON'
>>> s[5:120]------------------'N'
>>> s[-100:-3]----------------'PYT'
>>> s[-1000:-5]--------------'P'
>>> s[-500:-1]---------------'PYTHO'
>>> s[-8:-3]------------------'PYT'
>>> s[-100:-8]--------------''
------------------------------------------------
>>> s="PYTHON"
>>> print(s)-----------------PYTHON
>>> s[-600:600]-----------'PYTHON'
>>> s[-6:1000]-------------'PYTHON'
>>> s[-10:10]---------------'PYTHON'
>>> s[10:-10]----------------' '
***********************************************************
Syntax-2:  strobj[BEGIN :   ]  
***********************************************************
=>In This Syntax, we are specifying BEGIN Index and Not Specifying END Index.
=>If we don't Not Specify END Index then PVM Takes END Index as len(strobj)
					OR
=>If we don't Not Specify END Index then PVM Takes Range of Values from BEGIN Index to Last Character of strobj
--------------------------------
Examples
--------------------------------
>>> s="PYTHON"
>>> print(s)-------------------PYTHON
>>> s[2:]----------------------'THON'
>>> s[1:]----------------------'YTHON'
>>> s[3:]----------------------'HON'
>>> s[4:]-----------------------'ON'
>>> s[0:]-----------------------'PYTHON'
--------------------------------------
>>> s="PYTHON"
>>> print(s)------------------PYTHON
>>> s[-5:]---------------------'YTHON'
>>> s[-6:]---------------------'PYTHON'
>>> s[-4:]----------------------'THON'
>>> s[-2:]----------------------'ON'
>>> s[-3:]----------------------'HON'
>>> s[-1:]----------------------'N'
--------------------------------------
>>> s="PYTHON"
>>> print(s)----------------PYTHON
>>> s[-100:]---------------'PYTHON'
>>> s[-2000:]-------------'PYTHON'
>>> s[-True:]--------------'N'
>>> s[False:]--------------'PYTHON'
>>> s[1000:]---------------' '
>>> s[-0xF:]----------------'PYTHON'
-----------------------------------
***********************************************************
Syntax-3:  strobj[  : END ]
***********************************************************
=>In This Syntax, we are specifying END Index and Not Specifying  BEGIN Index.
=>If we don't Not Specify BEGIN Index then PVM Takes BEGIN Index always as 0 or -len(strobj)
					OR
=>If we don't Not Specify BEGIN Index then PVM Takes Range of Values from First Character to END-1 Index.
-----------------------------
Examples
-----------------------------
>>> s="PYTHON"
>>> print(s)-----------------------PYTHON
>>> s[:3]---------------------------'PYT'
>>> s[:4]---------------------------'PYTH'
>>> s[:5]---------------------------'PYTHO'
>>> s[:2]---------------------------'PY'
>>> s[:6]---------------------------'PYTHON'
------------------------
>>> s="PYTHON"
>>> print(s)-----------------PYTHON
>>> s[:-4]--------------------'PY'
>>> s[:-2]---------------------'PYTH'
>>> s[:-3]---------------------'PYT'
>>> s[:-1]----------------------'PYTHO'
>>> s[:-5]----------------------'P'
------------------------------------------
>>> s="PYTHON"
>>> print(s)------------PYTHON
>>> s[:1000]------------'PYTHON'
>>> s[:100]-------------'PYTHON'
>>> s[:-100]------------''
>>> s[100:]--------------''
***********************************************************
Syntax-4:  strobj[ : ]
***********************************************************
=>In This Syntax, we are  not specifying  BEGIN Index and END Index   .
=>If we don't Not Specify  BEGIN Index and END Index  then PVM Takes range of values from  0th Index to len(strobj)-1     OR -len(strobj)  to -1 Index
							OR
=>If we don't Not Specify  BEGIN Index and END Index  then PVM Takes range of values from First Character to Last 
   Character (Gives Complete str object data)
--------------------------------------
Examples
--------------------------------------
>>> s="PYTHON"
>>> print(s)---------------------------------PYTHON
>>> s[:]--------------------------------------'PYTHON'
>>> s="PYTHON PROG"
>>> s[:]-------------------------------------'PYTHON PROG'
-------------------------------------
>>> s="PYTHON"
>>> s[:]---------------------------------'PYTHON'
>>> s[-100:]---------------------------'PYTHON'
>>> s[:100]----------------------------'PYTHON'
>>> s[-1000:]--------------------------'PYTHON'
>>> s[:1000]---------------------------'PYTHON'
>>> s[-1000:1000]-------------------'PYTHON'
NOTE:  In all the above Syntaxes, we getting the Data from str obj in FORWARD DIRECTION with Default STEP is +1
*********************************************************************************************************************************
Syntax-5 :  strobj[BEGIN : END : STEP ]
*********************************************************************************************************************************
RULE-1: Here BEGIN , END and STEP can be either +VE  OR -VE
------------
RULE-2 : If the Value of STEP is +VE then PVM Takes range of Chars from BEGIN Index to END-1 Index in FORWARD 
------------ DIRECTION Provided BEGIN<END otherwise we get ' ' OR Space as Result

---------------
RULE-3:   If the Value STEP is -VE then PVM Takes range of Chars from BEGIN to END+1 Index in BACKWARD 
-------------DIRECTION Provided BEGIN > END otherwise we get ' ' OR Space as Result

--------------
RULE-4:  When we retrive the Data in Forward Direction anf If we specify the End Index as 0 then we get ' ' or Space 
--------------- as Result

RULE-5:  When we retrive the Data in Backward Direction anf If we specify the End Index as -1 then we get ' ' or Space
------------- as Result
*******************************************************************************************************************************************
Examples on RULE-2
-------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s)------------------PYTHON
>>> s[0:6]--------------------'PYTHON'
>>> s[0:6:1]-----------------'PYTHON'
>>> s[0:6:2]-----------------'PTO'
>>> s[0:6:3]------------------'PH'
>>> s[1:5:2]------------------'YH'
>>> s[1:6:2]-----------------'YHN'
>>> s[2:6:3]----------------'TN'
>>> s[-6:-1:1]---------------'PYTHO'
>>> s[-6:-1:2]---------------'PTO'
>>> s[-5:-2:2]---------------'YH'
>>> s[-4:-1:4]---------------'T'
>>> s[1::2]-------------------'YHN'
>>> s[-10::3]-----------------'PH'
>>> s[:100:2]----------------'PTO'
>>> s[-100:100:3]-----------'PH'
>>> s[-100:100:4]------------'PO'
>>> s[-100:100:1]-------------'PYTHON'
>>> s[-100:100:5]------------'PN'
>>> s[::]------------------------'PYTHON'
>>> s[::2]----------------------'PTO'
>>> s[::4]---------------------'PO'
>>> s[::14]---------------------'P'
>>> s="PYTHON"
>>> print(s)---------------PYTHON
>>> s[1:-1:3]-------------'YO'
>>> s[-4:5:1]--------------'THO'
>>> s[4:-5:1]--------------'  '
>>> s[-1:0:2]-------------'   '
>>> s[1000:-6:2]-------'  '
>>> s[-1000:0:2]-------'   '
--------------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[::]
'PYTHON'
>>> s[::1]
'PYTHON'
>>> s[::-1]
'NOHTYP'
>>> s[5:0:-1]
'NOHTY'
>>> s[5:0:-2]
'NHY'
>>> s[0:2:-2]
''
>>> s[5:1:-2]
'NH'
>>> s[-1:-6:-1]
'NOHTY'
>>> s[-2:-5:-3]
'O'
>>> s[3::-1]
'HTYP'
>>> s[4::-2]
'OTP'
>>> s[-2::-2]
'OTP'
>>> s[-5::-1]
'YP'
>>> s[-1::-3]
'NT'
>>> s[:4:-1]
'N'
>>> s[:3:]
'PYT'
>>> s[:3:-1]
'NO'
>>> s[:2:-1]
'NOH'
>>> s[:2:-3]
'N'
>>> s[:-4:-1]
'NOH'
>>> s[:-5:-2]
'NH'
>>> s="RACECAR"
>>> s[::-1]
'RACECAR'
>>> s="RACECAR"
>>> s[::-1]==s
True
>>> s="PYTHON"
>>> s[::-1]==s
False
>>> "MADAM"=="MADAM"[::-1]
True
>>> "LIRIL"=="LIRIL"[::-1]
True
>>> s="PYTHON"
>>> s[2:-1:-1]
''
>>> s[-1:3:-1]
'NO'
>>> s[-100:1000:-1]
''
-------------------------------------------------
Example Rule-4
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[4:0:1]
''
>>> s[5:0:2]
''
>>> s[3:0:3]
''
>>>

------------------------------------------------------------------------------------
Example Rule-5
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[4:-1:-1]
''
>>> s[-6:-1:-2]
''
>>> s[-4:-1:-3]
''
=============================================x===================================










































---------------------------------------------------------------------------------------------------------------------------------------------------------------
