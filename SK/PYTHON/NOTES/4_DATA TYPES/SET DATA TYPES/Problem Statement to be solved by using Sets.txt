			==================================================================
				Problem Statement to be solved by using Sets---Use Set Functions
			==================================================================
Let us Consider the following Problem

		set of Cricket Players={Rohit,Kohli,Rossum}
		Set of Tennis Players={Rohit,Travis,Kinney}
Answer the following Questions

	Q1) Find the player Names  who are playing all the games.
	Q2) Find the player names who are playing Both Cricket and Tennis.
	Q3) Find the player names who are playing Only Cricket But not Tennis
	Q4) Find the player names who are playing Only Tennis But not Cricket
	Q5) Find the player names who are playing eXclusively Cricket and Tennis
==============================================================================================
Q1) Find the player Names  who are playing all the games.-----union()
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> allcptp=cp.union(tp)
>>> print(allcptp,type(allcptp))------{'Kinney', 'Rohit', 'Rossum', 'Kohli', 'Travis'} <class 'set'>
==============================================================================================
Q2) Find the player names who are playing Both Cricket and Tennis----intersection()
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> bothcptp=cp.intersection(tp)
>>> print(bothcptp,type(bothcptp))----------{'Rohit'} <class 'set'>
==============================================================================================
Q3) Find the player names who are playing Only Cricket But not Tennis----difference()
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> onlycp=cp.difference(tp)
>>> print(onlycp,type(onlycp))---------{'Kohli', 'Rossum'} <class 'set'>
==============================================================================================
Q4) Find the player names who are playing Only Tennis But not Cricket------difference()
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> onlytp=tp.difference(cp)
>>> print(onlytp,type(onlytp))--------{'Kinney', 'Travis'} <class 'set'>
==============================================================================================
Q5) Find the player names who are playing eXclusively Cricket and Tennis--symmetric_difference()
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> excl_cptp=cp.symmetric_difference(tp)
>>> print(excl_cptp,type(excl_cptp))---------{'Kinney', 'Kohli', 'Rossum', 'Travis'} <class 'set'>
-----------------OR------------
>>> excl_cptp=cp.union(tp).difference(cp.intersection(tp))
>>> print(excl_cptp,type(excl_cptp))--------------{'Travis', 'Kohli', 'Kinney', 'Rossum'} <class 'set'>
=============================================================================================
				Problem Statement to be solved by using Sets---Don't Use Set Functions
			NOTE: TO Solve the following Problem, we use BITWISE Operators.
=============================================================================================
Let us Consider the following Problem

		set of Cricket Players={Rohit,Kohli,Rossum}
		Set of Tennis Players={Rohit,Travis,Kinney}
Answer the following Questions

	Q1) Find the player Names  who are playing all the games.
	Q2) Find the player names who are playing Both Cricket and Tennis.
	Q3) Find the player names who are playing Only Cricket But not Tennis
	Q4) Find the player names who are playing Only Tennis But not Cricket
	Q5) Find the player names who are playing eXclusively Cricket and Tennis
==============================================================================================
Q1) Find the player Names  who are playing all the games.-----union()  OR Bitwise OR ( | )
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> allcptp=cp|tp  # Bitwise OR ( | )
>>> print(allcptp,type(allcptp))------{'Kinney', 'Rohit', 'Rossum', 'Kohli', 'Travis'} <class 'set'>
==============================================================================================
Q2) Find the player names who are playing Both Cricket and Tennis----intersection() OR Bitwise AND ( & )
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> bothcptp=cp&tp # Bitwise AND Operator ( & )
>>> print(bothcptp,type(bothcptp))----------{'Rohit'} <class 'set'>
==============================================================================================
Q3) Find the player names who are playing Only Cricket But not Tennis----difference()
															OR Arithmetic Minus Operator ( - )
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> onlycp=cp-tp # Arithmetic Minus Operator ( - )
>>> print(onlycp,type(onlycp))---------{'Kohli', 'Rossum'} <class 'set'>
==============================================================================================
Q4) Find the player names who are playing Only Tennis But not Cricket--difference() 
													OR Arithmetic Minus Operator ( - )
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> onlytp=tp-cp  # Arithmetic Minus Operator ( - )
>>> print(onlytp,type(onlytp))--------{'Kinney', 'Travis'} <class 'set'>
==============================================================================================
Q5) Find the player names who are playing eXclusively Cricket and Tennis--symmetric_difference() 
																OR Bitwise XOR (^)
==============================================================================================
>>> cp={"Rohit","Kohli","Rossum"}
>>> tp={"Rohit","Travis","Kinney"}
>>> print(cp,type(cp))--------------{'Rohit', 'Kohli', 'Rossum'} <class 'set'>
>>> print(tp,type(tp))---------------{'Travis', 'Kinney', 'Rohit'} <class 'set'>
>>> excl_cptp=cp^tp  #Bitwise XOR (^)
>>> print(excl_cptp,type(excl_cptp))---------{'Kinney', 'Kohli', 'Rossum', 'Travis'} <class 'set'>
-----------------OR------------
>>> excl_cptp=(cp|tp)-(cp&tp) # Bitwise XOR (^) with Eqv Formula.
>>> print(excl_cptp,type(excl_cptp))--------------{'Travis', 'Kohli', 'Kinney', 'Rossum'} <class 'set'>
==============================================================================================