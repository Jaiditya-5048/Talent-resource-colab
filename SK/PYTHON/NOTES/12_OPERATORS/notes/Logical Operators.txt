			=======================================================
					Logical Operators ( (Comparision Operator)
			=======================================================
=>The purpose of Logical Operators is that "To combine Two or More Relational Expressions".
=>If Two or More Relational Expressions Combined with Logical Operators then It is called Logical Expression.
=>The Result of Logical Expression is either True or False.
=>The Logical Expression is also called Compund Test Condition and whose result can be either True or False
=>In Python Programming, we have 3 Types of Logical Operators. They are given in the following Table.
----------------------------------------------------------------------------------------------------------------------------------------------------------
SLNO			SYMBOL			MEANING
----------------------------------------------------------------------------------------------------------------------------------------------------------
1.				and				Physical ANDing
2.				or				Physical ORing
3.				not				--------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
1. 'and' Operator
----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:     RelExpr1  and  RelExpr2
=>The Functionality of 'and' Operator is Desribed in the following Truth Table
			--------------------------------------------------------------------------
			RelExpr1		RelExpr2		RelExpr1 and  RelExpr2
			--------------------------------------------------------------------------
				True			False			False
				False		True				False
				False		False			False
				True			True				True
			--------------------------------------------------------------------------
-----------------------
Example-1
-----------------------
>>> True and False----------------False
>>> False and True----------------False
>>> False and False--------------False
>>> True and True-----------------True
----------------------------
Example-2
----------------------------
>>> 10>2 and 20>3--------------True----Full Length Evaluation
>>> 10>20 and 20>3------------False---Short Circuit Evaluation
>>> 10>2 and 30>40------------False--Full Length Evaluation
>>> 10>20 and 30>3 and 20>4--False--Short Circuit Evaluation
>>> 10>2 and 20>30 and 30>4 and 30>4---False---Short Circuit Evaluation
--------------------------------------------------------------------------------------------------------------------------------
Def of Short Circuit Evaluation in the case 'and' Operator
**************************************************************************
=>If Multiple Relational Expressions connected with logical operator (and) and if Initial Relational Expression Result is False then PVM will not evaluate  Sub Sequenent Relational Expressions and the entire Result of Logical Expression is considered as False. This Process of Evaluation is called Short Circuit Evaluation.
----------------------------------------------------------------------------------------------------------------------------------------------------------
2. 'or'  Operator
----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:     RelExpr1  or  RelExpr2
=>The Functionality of 'or' Operator is Desribed in the following Truth Table
			--------------------------------------------------------------------------
			RelExpr1		RelExpr2		RelExpr1 or  RelExpr2
			--------------------------------------------------------------------------
				True			False		True		
				False		True			True		
				False		False		False			
				True			True			True		
			--------------------------------------------------------------------------
-----------------------
Example-1
----------------------
>>> True or False-------------------True
>>> False or True-------------------True
>>> False or False------------------False
>>> True or True--------------------True
------------------------
Example-2
------------------------
>>> 10>2 or 20>40-----------True-----------Short Circuit Evaluation
>>> 10>20 or 20>40---------False----------Full Length Evaluation
>>> 10>20 or 20>3----------True------------Full Length Evaluation
>>> 10>2 or 20>40 or 40>50----True----Short Circuit Evaluation
>>> 10>20 or 20>3 or 40>50 or 60>70----True----Short Circuit Evaluation
--------------------------------------------------------------------------------------------------------------------------------
Def of Short Circuit Evaluation in the case 'or' Operator
**************************************************************************
=>If Multiple Relational Expressions connected with logical operator (or) and if Initial Relational Expression Result is True then PVM will not evaluate  Sub Sequenent Relational Expressions and the entire Result of Logical Expression is considered as True. This Process of Evaluation is called Short Circuit Evaluation.
----------------------------------------------------------------------------------------------------------------------------------------------------------
3. 'not'  Operator
----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    not (Relational Expression)
				OR
		     not (Rel Expr1 Logical Operator  RelExpr2)
=>The 'not' Operator gives Opposite result of Original Result of Relation Expression or Logical Expression.
=>The Functionality of 'not' Operator is Desribed in the following Truth Table
			--------------------------------------------------------------------------
			    RelExpr1		not RelExpr1		
			--------------------------------------------------------------------------
				True			   False	
				False		   True		
			--------------------------------------------------------------------------
-----------------------
Exanmples-1
------------------------
>>> not True---------------False
>>> not False--------------True
>>> a=True
>>> not a--------------------False
>>> a=False
>>> not a--------------------True
-------------------------------
Examples-2
-------------------------------
>>> not 10>20----------------True
>>> not 10<20----------------False
--------------------------------
Example-3
--------------------------------
>>> not(10>2 and 20>3)----------False
>>> not(10>20 and 30>40)------True
>>> not(100>300 or 20>10)----False
>>> not(100>300 or 20>100)----True
----------------------------------------------------------------------------------------------------------------------------------------------------------
Special Points about  'and'
----------------------------------------------------------------------------------------------------------------------------------------------------------
>>> 100 and 200------------200
>>> 100 and -200-----------   -200
>>> 100 and 0---------------   0
>>> 0 and 200---------------   0
>>> 100 and 200 and -250---    -250
>>> 100 and 0 and 300----------  0
>>> "Python" and "HTML"----------'HTML'
>>> "False" and "True"--------------'True'
>>> "True" and "False"---------------'False'
>>> "Java" and False and "Python"---False
>>> "Python" and 10 and "Java"------'Java'
>>> bool("") and "Java"------------False
>>> "Python" and str(bool("False"))----'True'
----------------------------------------------------------------------------------------------------------------------------------------------------------
Special Points about  'or
----------------------------------------------------------------------------------------------------------------------------------------------------------
>>> 10 or 20--------------------10
>>> 0 or 20----------------------20
>>> 10 or 20 or 30-------------10
>>> -10 or -20 or False-------10
>>> 0 or 20 or 0-----------------20
>>> "Python" or "Java"----------'Python'
>>> bool("Python") or False----True
>>> 10 or "python" or 45.67----10
----------------------------------------------------------------------------------------------------------------------------------------------------------
Special Points about  'not'
----------------------------------------------------------------------------------------------------------------------------------------------------------
>>> not 10-------------False
>>> not -20------------False
>>> not 0---------------True
>>> not 10-10---------True
>>> not "Python-Python"-------False
>>> not 2.5-2.5--------------------True
>>> not ""--------------------------True
>>> not 0b1010------------------False
----------------------------------------------------------------------------------------------------------------------------------------------------------
Special Points about  'and'  'or'  'not
----------------------------------------------------------------------------------------------------------------------------------------------------------
>>> 10 and 20 or 30-----------------20
>>> 10 or 20 or 30 and 40 and 50-----------10
>>> 10 and 20 or 30 and 40 or 60 and 70---------20
>>> "Java" and "Python" or "HTML" and "Django" or "C++"--------'Python'
>>> 2+3j and -2-3j or 2+4j or -2-6.5j---------------(-2-3j)
>>> None or "Python"--------------------------------'Python'
>>> None or None-------------------------------------Nothing will be displayed
		OR
>>> print(None or None)-----------------------------None
----------------------------
>>> not None-----------------------------------------True
>>> not(not None)-----------------------------------False
>>> bool(None)--------------------------------------False
>>> bool("None")------------------------------------True
--------------------------
>>> # and $ or @--------------No Output bcoz the symbols # is used for Commenting Purpose
>>> $ and  # or @--------------SyntaxError: invalid syntax
----------------------------------------------------------------------------------------------------------------------------------------------------------
