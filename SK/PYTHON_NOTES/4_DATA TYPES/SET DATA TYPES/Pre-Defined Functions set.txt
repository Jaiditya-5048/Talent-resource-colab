				=========================================================
						Pre-Defined Functions set
				=========================================================
=>We Know that, On the object of set, we can't perform indexing and Slicing Operations bcoz set object never 
    maintains Insertion Order. But On the set object, we can perform Various Operations by using Pre-Defined functions Present in set object. They are
*********************************************************************************************************************************************
1. add()
*********************************************************************************************************************************************
Syntax:   setobj.add(value)
=>This function is used for adding the value to the set object.
------------------------
Examples
------------------------
>>> s1={10,"RS",34.56,"PYTHON"}
>>> print(s1,type(s1),id(s1))--------------{10, 'PYTHON', 34.56, 'RS'} <class 'set'> 2723465869824
>>> s1.add(45.67)
>>> print(s1,type(s1),id(s1))----------------{34.56, 'RS', 10, 45.67, 'PYTHON'} <class 'set'> 2723465869824
>>> s1.add("NL")
>>> print(s1,type(s1),id(s1))--------------{34.56, 'RS', 10, 45.67, 'NL', 'PYTHON'} <class 'set'> 2723465869824
------------------------
>>> s1=set()
>>> print(s1,type(s1),id(s1))-----------set() <class 'set'> 2723465863776
>>> s1.add("PYTHON")
>>> s1.add("Java")
>>> s1.add("C")
>>> print(s1,type(s1),id(s1))------------{'C', 'PYTHON', 'Java'} <class 'set'> 2723465863776
>>> s1.add("HTML")
>>> print(s1,type(s1),id(s1))------------{'C', 'PYTHON', 'Java', 'HTML'} <class 'set'> 2723465863776
*********************************************************************************************************************************************
2. remove()
*********************************************************************************************************************************************
Syntax:    setobj.remove(value)
=>This function is used for Removing the Values from set object.
=>If Value does not found in setobject then we get KeyError
----------------------------------------------------------------------------------------------
Examples
----------------------------------------------------------------------------------------------
>>> s1={10,"RS",34.56,"PYTHON"}
>>> print(s1,type(s1),id(s1))-----------------{10, 'PYTHON', 34.56, 'RS'} <class 'set'> 2723465867808
>>> s1.remove(34.56)
>>> print(s1,type(s1),id(s1))-----------------{10, 'PYTHON', 'RS'} <class 'set'> 2723465867808
>>> s1.remove("RS")
>>> print(s1,type(s1),id(s1))-----------------{10, 'PYTHON'} <class 'set'> 2723465867808
>>> s1.remove(234)----------------------------KeyError: 234
>>> set().remove(100)------------------------KeyError: 100
>>> {10,20,30,40}.remove(100)------------KeyError: 100
MOST IMP
---------------
>>> lst=[10,10,20,30,40,50,10,20,30,40,50]
>>> s1=set(lst)
>>> print(s1,type(s1))
{40, 10, 50, 20, 30} <class 'set'>
>>> len(s1)
5
>>>
>>>
>>> lst=[10,10,20,30,40,50,10,20,30,40,50]
>>> kvr=[]
>>> for val in lst:
...     if val not in kvr:
...             kvr.append(val)
...
>>> print(kvr,len(kvr))
[10, 20, 30, 40, 50] 5
---------------------------------
>>> s="MISSISSIPPI"
>>> s1=set(s)
>>> print(s1,type(s1))
{'M', 'S', 'I', 'P'} <class 'set'>
-----------------
>>> s="MISSISSIPPI"
>>> lst=[]
>>> for val in s:
...     if val not in lst:
...             lst.append(val)
...
>>>
>>> print(lst)
['M', 'I', 'S', 'P']
*********************************************************************************************************************************************
3. discard()
*********************************************************************************************************************************************
Syntax:    setobj.discard(value)
=>This function is used for Removing the Values from set object.
=>If Value does not found in setobject then we get Space as Result  ( i.e we never get KeyError )
---------------------------------------
Examples
---------------------------------------
>>> s1={10,"RS",34,56.78,True,2+3.5j}
>>> print(s1,type(s1),id(s1))-------------{True, 34, 56.78, 10, (2+3.5j), 'RS'} <class 'set'> 2400326791712
>>> s1.discard(10)
>>> print(s1,type(s1),id(s1))-------------{True, 34, 56.78, (2+3.5j), 'RS'} <class 'set'> 2400326791712
>>> s1.discard("RS")
>>> print(s1,type(s1),id(s1))-------------{True, 34, 56.78, (2+3.5j)} <class 'set'> 2400326791712
>>> s1.discard(56.78)
>>> print(s1,type(s1),id(s1))-------------{True, 34, (2+3.5j)} <class 'set'> 2400326791712

>>> s1.discard("Rossum")---------------NO result 

>>> s1.remove("Rossum")---------------KeyError: 'Rossum'
>>> set().discard(100)--------------NO result 
>>> set().remove(100)--------------KeyError: 100
*********************************************************************************************************************************************
4. pop()
*********************************************************************************************************************************************
=>Syntax:  setobj.pop()
=>This Function is used for Removing any Arbitrary Element from non-empty set object.
=>When we call this function on empty set object then we get KeyError
--------------------------------------
Examples
--------------------------------------
>>> s1={10,"RS",34,56.78,True,2+3.5j}
>>> s1.pop()--------------True
>>> s1.pop()--------------34
>>> s1.pop()--------------56.78
>>> s1.pop()--------------10
>>> s1.pop()--------------(2+3.5j)
>>> s1.pop()--------------'RS'
>>> s1.pop()----------------KeyError: 'pop from an empty set'
>>> set().pop()------------KeyError: 'pop from an empty set'
*********************************************************************************************************************************************
5. clear()
*********************************************************************************************************************************************
Syntax:  setobj.clear()
=>This Function is used for Removing all the Elements from set object.
=>When we call this function on empty set object then we get None as Result.
--------------------------
Examples
--------------------------
>>> s1={10,"RS",34,56.78,True,2+3.5j}
>>> print(s1,type(s1),id(s1))-----------{True, 34, 56.78, 10, (2+3.5j), 'RS'} <class 'set'> 2400326793952
>>> len(s1)---------------------------------6
>>> s1.clear()
>>> len(s1)---------------------------------0
>>> print(s1,type(s1),id(s1))----------set() <class 'set'> 2400326793952
>>> print(s1.clear())--------------------None
>>> print(set().clear())-----------------None
*********************************************************************************************************************************************
6. isdisjoint()
*********************************************************************************************************************************************
Syntax:   setobj1.isdisjoint(setobj2)
=>This Function returns True Provided There is no common element(s) present in setobj1 and setobj2.
=>This Function returns False Provided There is atleast One common element(s) present in setobj1 and setobj2.
--------------------------
Examples
--------------------------
>>> s1={10,20,30,40}
>>> s2={15,25,35}
>>> s3={10,18,28,38}
>>> s1.isdisjoint(s2)---------------True
>>> s1.isdisjoint(s3)--------------False
>>> s2.isdisjoint(s3)-------------True
-----------------------------------------
>>> set().isdisjoint(set())---------True
>>> set().isdisjoint({10,20,30})---True
*********************************************************************************************************************************************
7. issuperset()
*********************************************************************************************************************************************
Syntax:   setobj1.issuperset(setobj2)
=>This Function returns True provided SetObj1 contains all the elements of SetObj2
=>This Function returns False provided SetObj1 does not contain all the elements of SetObj2
-----------------
Examples
------------------
>>> s1={10,20,30,40}
>>> s2={10,20}
>>> s3={10,25,35,45}
>>> s1.issuperset(s2)------------True
>>> s1.issuperset(s3)------------False
>>> s1.issuperset(set())-------------True
>>> set().issuperset(set())----------True
>>> set().issubset(set())-------------True
>>> set().issubset({10,20,30})------True
>>> {10,20,30,40}.issuperset(set())----True
>>> {10,20,30,40}.issubset(set())-------False
*********************************************************************************************************************************************
8. issubset()
***************************************************************************************************************************************
Syntax:   setobj1.issubset(setobj2)
=>This function returns True Provided all the elements of setobj1 present in setobj2
=>This function returns False Provided all the elements of setobj1 not present in setobj2
---------------------------
Examples
---------------------------
>>> s1={10,20,30,40}
>>> s2={10,20}
>>> s3={10,25,35,45}
>>> s1.issubset(s2)-------------False
>>> s2.issubset(s1)-------------True
>>> s1.issubset(s3)-------------False
>>> s2.issubset(s3)------------False
>>> s1={10,20,30,40}
>>> s1.issuperset(set())-------------True
>>> set().issuperset(set())----------True
>>> set().issubset(set())-------------True
>>> set().issubset({10,20,30})------True
>>> {10,20,30,40}.issuperset(set())----True
>>> {10,20,30,40}.issubset(set())-------False
*********************************************************************************************************************************************
9. union()
*********************************************************************************************************************************************
Syntax:     setobj3=setobj1.union(setobj2)
=>This Function Obtains All Unique Elements from Setobj1 and Setobj2 and Place them in setobj3
----------------
Examples
-----------------
>>> s1={10,20,30,40}
>>> s2={10,30,25,35}
>>> print(s1,type(s1))-----------{40, 10, 20, 30} <class 'set'>
>>> print(s2,type(s2))-----------{25, 10, 35, 30} <class 'set'>
>>> s3=s1.union(s2)
>>> print(s3,type(s3))------------{35, 40, 10, 20, 25, 30} <class 'set'>
>>> {10,20,30}.union({1,2,3},{4,5,10})-------------{1, 2, 3, 4, 5, 10, 20, 30}
*********************************************************************************************************************************************
10. intersection()
*********************************************************************************************************************************************
Syntax:     setobj3=setobj1.intersection(setobj2)
=>This Function Obtains All Common Elements from Setobj1 and Setobj2 and Place them in setobj3.
-----------------
Examples
-----------------
>>> s1={10,20,30,40}
>>> s2={10,30,25,35}
>>> print(s1,type(s1))-----------{40, 10, 20, 30} <class 'set'>
>>> print(s2,type(s2))-----------{25, 10, 35, 30} <class 'set'>
>>> s3=s1.intersection(s2)
>>> print(s3,type(s3))----------{10, 30} <class 'set'>
>>> s3=s1.intersection(s2)
>>> print(s3,type(s3))--------------set() <class 'set'>
>>> {10,20,30}.intersection({1,2,3,4})---------set()
>>> set().intersection(set())-----------set()

>>> {10,20,30}.intersection({1,2,3},{4,5,10})-----------set()
>>>
*********************************************************************************************************************************************
11. difference()
*********************************************************************************************************************************************
Syntax:     setobj3=setobj1.difference(setobj2)
=>This function is used for Removing the Common Elements from Both setobj1 and setobj2 and later takes the 
    Remaining Elements from setobj1 and Place them in setobj3.
-------------------------
Examples
-------------------------
>>> s1={10,20,30,40}
>>> s2={10,30,25,35}
>>> print(s1,type(s1))-----------------{40, 10, 20, 30} <class 'set'>
>>> print(s2,type(s2))------------------{25, 10, 35, 30} <class 'set'>
>>> s3=s1.difference(s2)
>>> print(s3,type(s3))------------------{40, 20} <class 'set'>

>>> s3=s2.difference(s1)
>>> print(s3,type(s3))-------------{25, 35} <class 'set'>
>>> s3=set().difference({10,20,30,40})
>>> print(s3)-----------------set()
>>> s3={10,20,30,40}.difference(set())
>>> print(s3)-------------{40, 10, 20, 30}
>>> s3={10,20,30,40}.difference({10,20,30,40})
>>> print(s3)--------------set()
*********************************************************************************************************************************************
12. difference_update()
*********************************************************************************************************************************************
Syntax:     setobj3=setobj1.difference_update(setobj2)
=>This function is used for Removing the Common Elements from Both setobj1 and setobj2 and later takes the 
    Remaining Elements from setobj1 and Place them in setobj1 itself.
----------------
Examples
-----------------
>>> s1={10,20,30,40}
>>> s2={10,30,25,35}
>>> print(s1,type(s1))---------------------{40, 10, 20, 30} <class 'set'>
>>> print(s2,type(s2))----------------------{25, 10, 35, 30} <class 'set'>
>>> s3=s1.difference_update(s2)
>>> print(s3)----------------------------------None
>>> print(s1)---------------------------------{20, 40}
-------------------------
>>> s1={10,20,30,40}
>>> s2={10,30,25,35}
>>> s2.difference_update(s1)
>>> print(s2)------------------------------{35, 25}

*********************************************************************************************************************************************
13. symmetric_difference()
*********************************************************************************************************************************************
Syntax:     setobj3=setobj1.symmetric_difference(setobj2)
=>This function is used for Removing the Common Elements from Both setobj1 and setobj2 and later takes the 
    Remaining Elements from setobj1 and setobj2 and Place them in setobj3.
			OR
Syntax Formula:			setobj3=setobj1.symmetric_difference(setobj2)
------------------------							OR
				setobj3=setobj1.union(setobj2).difference(setobj1.intersection(setobj2))

------------------------
Examples
------------------------
>>> s1={10,20,30,40}
>>> s2={10,30,25,35}
>>>
>>> s3=s1.symmetric_difference(s2)
>>> print(s3,type(s3))-----------{35, 40, 20, 25} <class 'set'>
>>>
>>> s3={10,20,30}.symmetric_difference(set())
>>> print(s3)-----------{10, 20, 30}
>>> s3={10,20,30}.symmetric_difference({10,20,30})
>>> print(s3)------------set()
			OR
>>> s4=s1.union(s2).difference(s1.intersection(s2))
>>> print(s4,type(s4))--------------------{40, 25, 35, 20} <class 'set'>
>>>
*********************************************************************************************************************************************
14. symmetric_difference_update()
*********************************************************************************************************************************************
Syntax:     setobj3=setobj1.symmetric_difference_update(setobj2)
=>This function is used for Removing the Common Elements from Both setobj1 and setobj2 and later takes the 
    Remaining Elements from setobj1 and setobj2 and Place them in setobj1 itself.
---------------------------
Examples
---------------------------
>>> s1={10,20,30,40}
>>> s2={10,30,25,35}
>>> s4=s1.symmetric_difference_update(s2)
>>> print(s4)--------------None
>>> print(s1)-------------{35, 40, 20, 25}
*********************************************************************************************************************************************
15. update()
*********************************************************************************************************************************************
Syntax:   setobj1.update(setobj2)
=>This Function is used for Merging the Elements setobj2 with setobj1 and result present in setobj1
---------------------------------
Examples
---------------------------------
>>> s1={10,20,30,40}
>>> s2={10,30,25,35}
>>> s1.update(s2)
>>> print(s1)----------------{35, 40, 10, 20, 25, 30}
--------------------------
>>> s1={10,20,30,40}
>>> s2={12,3,4,5}
>>> s1.update(s2)
>>> print(s1)---------------{3, 4, 5, 40, 10, 12, 20, 30}
--------------------------
>>> s1={10,20,30}
>>> s2={10,20,30}
>>> s1.update(s2)
>>> print(s1)------------{20, 10, 30}
*********************************************************************************************************************************************
